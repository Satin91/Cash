//
//  CustomProgressBar.swift
//  cashApp
//
//  Created by Charadrii on 18.03.21.
//  Copyright Â© 2021 Charadrii. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class CustomProgressBar : NSObject {

    //// Cache

    private struct Cache {
        static let color3: UIColor = UIColor(red: 0.188, green: 0.867, blue: 0.850, alpha: 1.000)
        static let color4: UIColor = UIColor(red: 0.754, green: 0.474, blue: 0.959, alpha: 1.000)
        static let gradient: CGGradient = CGGradient(colorsSpace: nil, colors: [CustomProgressBar.color3.cgColor, CustomProgressBar.color3.blended(withFraction: 0.5, of: CustomProgressBar.color4).cgColor, CustomProgressBar.color4.cgColor] as CFArray, locations: [0, 0.52, 1])!
    }

    //// Colors

    @objc dynamic public class var color3: UIColor { return Cache.color3 }
    @objc dynamic public class var color4: UIColor { return Cache.color4 }

    //// Gradients

    @objc dynamic public class var gradient: CGGradient { return Cache.gradient }

    //// Drawing Methods

    @objc dynamic public class func drawCreateProgressBar(frame: CGRect = CGRect(x: 0, y: 75, width: 290, height: 26), backgroundColor: UIColor = UIColor(red: 0.584, green: 0.306, blue: 0.306, alpha: 1.000), progress: CGFloat = 105, xMin: CGFloat = 26, xMax: CGFloat = 290) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let color9 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Variable Declarations
        let progressGrid: CGFloat = progress >= xMin && progress <= xMax ? progress : (progress < xMin ? xMin : xMax)
        let widthExp: CGFloat = progressGrid

        //// Color Rectangle Drawing
        let colorRectangleRect = CGRect(x: frame.minX + fastFloor((frame.width) * 0.00000 + 0.5), y: frame.minY + fastFloor((frame.height) * 0.00000 + 0.5), width: frame.width - fastFloor((frame.width) * 0.00000 + 0.5), height: frame.height - fastFloor((frame.height) * 0.00000 + 0.5))
        let colorRectanglePath = UIBezierPath(roundedRect: colorRectangleRect, cornerRadius: 13)
        context.saveGState()
        colorRectanglePath.addClip()
        context.drawLinearGradient(CustomProgressBar.gradient,
            start: CGPoint(x: colorRectangleRect.minX, y: colorRectangleRect.midY),
            end: CGPoint(x: colorRectangleRect.maxX, y: colorRectangleRect.midY),
            options: [])
        context.restoreGState()


        //// ProgressBarActive Drawing
        context.saveGState()
        context.translateBy(x: 3, y: -2)

        context.saveGState()
        context.setBlendMode(.destinationIn)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let progressBarActivePath = UIBezierPath(roundedRect: CGRect(x: -3, y: 2, width: progressGrid, height: 26), cornerRadius: 13)
        color9.setFill()
        progressBarActivePath.fill()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: widthExp, y: 0, width: 264, height: 26))
        backgroundColor.setFill()
        rectanglePath.fill()
    }

    @objc dynamic public class func drawProgressBar(frame: CGRect = CGRect(x: 0, y: 75, width: 290, height: 26), backgroundColor: UIColor = UIColor(red: 0.584, green: 0.306, blue: 0.306, alpha: 1.000), progress: CGFloat = 105) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Symbol Drawing
        context.saveGState()
        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let symbolRect = CGRect(x: frame.minX, y: frame.minY, width: 290, height: 26)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        CustomProgressBar.drawCreateProgressBar(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), backgroundColor: backgroundColor, progress: progress, xMin: 26, xMax: 290)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()
    }

}



private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
